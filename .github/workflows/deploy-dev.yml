
# Summary:
# Deploys your Infra via Terraform (infra/)
# Updates kubeconfig for dev-eks-cluster.
# Deploys product-service backend into dev namespace.
# Builds your React frontend with the correct backend URL from Kubernetes Service.
# Deploys frontend to S3 and invalidates CloudFront for instant updates.

# Replace:
# your-frontend-s3-bucket-${{ env.ENVIRONMENT }}
# YOUR_CLOUDFRONT_DIST_ID
# with your real resource names.

name: Dev Environment Deploy

on:
  push:
    branches:
      - dev  # Runs only when you push to 'dev' branch

jobs:
  deploy-dev:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: ce-grp-1-dev-eks-cluster
      ENVIRONMENT: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply
        working-directory: ./infra
        run: |
          terraform init -backend-config="./backend-${{ env.ENVIRONMENT }}.config"
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform apply -var-file=${{ env.ENVIRONMENT }}.tfvars -auto-approve


      - name: Update kubeconfig for EKS Cluster
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace ${{ env.ENVIRONMENT }} || kubectl create namespace ${{ env.ENVIRONMENT }}

          
      - name: Deploy product-service to EKS
        run: |
          export IMAGE_TAG="${{ env.ENVIRONMENT }}-${{ github.sha }}"
          envsubst < ./product-service/k8s/${{ env.ENVIRONMENT }}/deployment.yaml | kubectl apply -f -
          kubectl apply -f ./product-service/k8s/${{ env.ENVIRONMENT }}/service.yaml

      - name: Update Deployment Image
        run: |
          IMAGE_TAG="${GITHUB_REF##*/}-${GITHUB_SHA}"
          IMAGE_URI="255945442255.dkr.ecr.us-east-1.amazonaws.com/ce-grp-1/product-service"
          kubectl set image deployment/product-service \
          product-service=$IMAGE_URI:$IMAGE_TAG \
          -n ${{ env.ENVIRONMENT }}



      - name: Build React Frontend
        working-directory: ./frontend
        run: |
          echo "REACT_APP_API_URL=http://$(kubectl get svc product-service -n ${{ env.ENVIRONMENT }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > .env
          cat .env
          npm ci --prefix frontend
          NODE_OPTIONS=--openssl-legacy-provider npm run build --prefix frontend


      - name: Deploy React Frontend to EKS
        run: |
          IMAGE_TAG=${{ env.ENVIRONMENT }}-${{ github.sha }}
          IMAGE_URI=255945442255.dkr.ecr.us-east-1.amazonaws.com/ce-grp-1/react-frontend
          envsubst < ./product-service/k8s/${{ env.ENVIRONMENT }}/frontend-deployment.yaml | kubectl apply -f -
          kubectl apply -f ./product-service/k8s/${{ env.ENVIRONMENT }}/frontend-service.yaml



      # - name: Deploy Frontend to S3
      #   working-directory: ./frontend
      #   run: |
      #     aws s3 sync ./build s3://your-frontend-s3-bucket-${{ env.ENVIRONMENT }}/ --delete

      # - name: Invalidate CloudFront Cache
      #   run: |
      #     aws cloudfront create-invalidation --distribution-id YOUR_CLOUDFRONT_DIST_ID \
      #     --paths "/*"



      