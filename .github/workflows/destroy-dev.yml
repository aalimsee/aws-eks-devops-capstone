
# Explanation:
# Manually triggered via GitHub UI for safety (workflow_dispatch).
# Selects the dev Terraform workspace.
# Runs terraform destroy to delete all provisioned infra.
# Cleans out your frontend S3 bucket.
# Logs completion for clear visibility.

# Replace:
# your-frontend-s3-bucket-${{ env.ENVIRONMENT }} with your actual S3 bucket name.

name: Destroy Dev Environment

on:
  workflow_dispatch:  # Manual trigger from GitHub UI

# job only runs when the workflow is triggered from the dev branch
jobs:
  destroy-dev:
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: ce-grp-1-dev-eks-cluster
      ENVIRONMENT: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init -backend-config=backend-${{ env.ENVIRONMENT }}.config

      - name: Select Workspace
        working-directory: ./infra
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }}

# Terraform only deletes resources it created — the ALB is not in its state, so it doesn’t know about it.
# The ALB is a byproduct of your Kubernetes Service — not Terraform.

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
  
      - name: Delete Kubernetes Services to free ALBs
        run: |
            kubectl delete service product-service -n ${{ env.ENVIRONMENT }} || echo "Service already deleted or not found."
            kubectl delete service react-frontend -n ${{ env.ENVIRONMENT }} || echo "Service already deleted or not found."
  
      - name: Sleep to allow ALB to deprovision
        run: sleep 120

        
      - name: Terraform Destroy
        working-directory: ./infra
        run: terraform destroy -var-file=${{ env.ENVIRONMENT }}.tfvars -auto-approve

      # - name: Empty Frontend S3 Bucket
      #   run: |
      #     aws s3 rm s3://your-frontend-s3-bucket-${{ env.ENVIRONMENT }} --recursive || echo "Bucket already empty or doesn't exist"

      - name: Log completion
        run: echo "Dev environment destroyed successfully!"
